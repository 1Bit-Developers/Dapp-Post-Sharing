import React, { Component } from 'react';
import Web3 from 'web3';//to connect the app to the blockchain. We'll do this with the Web3.js library.
import Identicon from 'identicon.js';
import './App.css';
/* the smart contract ABI file that was generated by Truffle whenever we deployed
the smart contract to the blockchain. This file contains a JSON description of how our
smart contract works, like the kinds of functions it has and their arguments.
 It also tracks the address of the smart contract on the blockchain. */
import SocialNetwork from '../abis/SocialNetwork.json'
import Navbar from './Navbar'
import Main from './Main'

class App extends Component {

  async componentWillMount() {
    await this.loadWeb3()//call the function that detects metamask
    await this.loadBlockchainData()
  }

/*This code detects the presence of an Ethereum provider in the web browser, provided
 by Metamask.
 These are the exact instructions that Metamask gives us for loading web3 in our app
*/
  async loadWeb3() {
    if (window.ethereum) {
      window.web3 = new Web3(window.ethereum)
      await window.ethereum.enable()
    }
    else if (window.web3) {
      window.web3 = new Web3(window.web3.currentProvider)
    }
    else {
      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')
    }
  }

  async loadBlockchainData() {
    const web3 = window.web3
    // Load account
    const accounts = await web3.eth.getAccounts()//web3 function to get account info from metamask
    this.setState({ account: accounts[0] })
    // Network ID
    const networkId = await web3.eth.net.getId()//fetch the networkId from ganache in this case 5777
    //we read the smart contract data for this specific network, and save it as newtorkData.
    const networkData = SocialNetwork.networks[networkId]
    if(networkData) {
      //create a JavaScript version of the smart contract with web3.eth.Contract.
      //We pass in the smart contract ABI and address to do this.
      const socialNetwork = web3.eth.Contract(SocialNetwork.abi, networkData.address)
      this.setState({ socialNetwork })//set the state data
      const postCount = await socialNetwork.methods.postCount().call()//get the postCount
      this.setState({ postCount })//set it into postCount state object 
      // Load Posts
      for (var i = 1; i <= postCount; i++) {
        const post = await socialNetwork.methods.posts(i).call()
        this.setState({
          posts: [...this.state.posts, post]
        })
      }
      // Sort posts. Show highest tipped posts first
      this.setState({
        posts: this.state.posts.sort((a,b) => b.tipAmount - a.tipAmount )
      })
      this.setState({ loading: false})
    } else {
      window.alert('SocialNetwork contract not deployed to detected network.')
    }
  }

  createPost(content) {
    this.setState({ loading: true })
    this.state.socialNetwork.methods.createPost(content).send({ from: this.state.account })
    .once('receipt', (receipt) => {
      this.setState({ loading: false })
    })
  }

  tipPost(id, tipAmount) {
    this.setState({ loading: true })
    this.state.socialNetwork.methods.tipPost(id).send({ from: this.state.account, value: tipAmount })
    .once('receipt', (receipt) => {
      this.setState({ loading: false })
    })
  }

// stores all the account info for the front end
//like a state storer for the current session
  constructor(props) {
    super(props)
    this.state = {
      account: '',
      socialNetwork: null,//JavaScript version of the ABI
      postCount: 0,
      posts: [],
      loading: true
    }

    this.createPost = this.createPost.bind(this)
    this.tipPost = this.tipPost.bind(this)
  }

  render() {
    return (
      <div>
        <Navbar account={this.state.account} />//we first fetch the account from state,
        //and pass it down as the account prop when we render the component.
        { this.state.loading
          ? <div id="loader" className="text-center mt-5"><p>Loading...</p></div>
          : <Main
              posts={this.state.posts}
              createPost={this.createPost}
              tipPost={this.tipPost}
            />
        }
      </div>
    );
  }
}

export default App;
